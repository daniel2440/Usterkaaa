{"ast":null,"code":"export function configureFakeBackend() {\n  let users = [{\n    id: 1,\n    username: 'test',\n    password: 'test',\n    firstName: 'Test',\n    lastName: 'User'\n  }, {\n    id: 1,\n    username: 'gkoziol',\n    password: 'gkoziol',\n    firstName: 'Grzegorz',\n    lastName: 'Koziol'\n  }];\n  let realFetch = window.fetch;\n\n  window.fetch = function (url, opts) {\n    const isLoggedIn = opts.headers['Authorization'] === 'Bearer fake-jwt-token';\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(() => {\n        // authenticate - public\n        if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n          const params = JSON.parse(opts.body);\n          const user = users.find(x => x.username === params.username && x.password === params.password);\n          if (!user) return error('Username or password is incorrect');\n          return ok({\n            id: user.id,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            token: 'fake-jwt-token'\n          });\n        } // get users - secure\n\n\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          if (!isLoggedIn) return unauthorised();\n          return ok(users);\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(response => resolve(response)); // private helper functions\n\n        function ok(body) {\n          resolve({\n            ok: true,\n            text: () => Promise.resolve(JSON.stringify(body))\n          });\n        }\n\n        function unauthorised() {\n          resolve({\n            status: 401,\n            text: () => Promise.resolve(JSON.stringify({\n              message: 'Unauthorised'\n            }))\n          });\n        }\n\n        function error(message) {\n          resolve({\n            status: 400,\n            text: () => Promise.resolve(JSON.stringify({\n              message\n            }))\n          });\n        }\n      }, 500);\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/danie/WebstormProjects/Usterka/src/auth/helpers/fake-backend.js"],"names":["configureFakeBackend","users","id","username","password","firstName","lastName","realFetch","window","fetch","url","opts","isLoggedIn","headers","Promise","resolve","reject","setTimeout","endsWith","method","params","JSON","parse","body","user","find","x","error","ok","token","unauthorised","then","response","text","stringify","status","message"],"mappings":"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","sourcesContent":["export function configureFakeBackend() {\r\n    let users = [\r\n        {id: 1, username: 'test', password: 'test', firstName: 'Test', lastName: 'User'},\r\n        {id: 1, username: 'gkoziol', password: 'gkoziol', firstName: 'Grzegorz', lastName: 'Koziol'}\r\n    ];\r\n    let realFetch = window.fetch;\r\n    window.fetch = function (url, opts) {\r\n        const isLoggedIn = opts.headers['Authorization'] === 'Bearer fake-jwt-token';\r\n\r\n        return new Promise((resolve, reject) => {\r\n            // wrap in timeout to simulate server api call\r\n            setTimeout(() => {\r\n                // authenticate - public\r\n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\r\n                    const params = JSON.parse(opts.body);\r\n                    const user = users.find(x => x.username === params.username && x.password === params.password);\r\n                    if (!user) return error('Username or password is incorrect');\r\n                    return ok({\r\n                        id: user.id,\r\n                        username: user.username,\r\n                        firstName: user.firstName,\r\n                        lastName: user.lastName,\r\n                        token: 'fake-jwt-token'\r\n                    });\r\n                }\r\n\r\n                // get users - secure\r\n                if (url.endsWith('/users') && opts.method === 'GET') {\r\n                    if (!isLoggedIn) return unauthorised();\r\n                    return ok(users);\r\n                }\r\n\r\n                // pass through any requests not handled above\r\n                realFetch(url, opts).then(response => resolve(response));\r\n\r\n                // private helper functions\r\n\r\n                function ok(body) {\r\n                    resolve({ok: true, text: () => Promise.resolve(JSON.stringify(body))})\r\n                }\r\n\r\n                function unauthorised() {\r\n                    resolve({status: 401, text: () => Promise.resolve(JSON.stringify({message: 'Unauthorised'}))})\r\n                }\r\n\r\n                function error(message) {\r\n                    resolve({status: 400, text: () => Promise.resolve(JSON.stringify({message}))})\r\n                }\r\n            }, 500);\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}