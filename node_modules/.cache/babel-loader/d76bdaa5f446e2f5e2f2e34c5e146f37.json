{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\danie\\\\WebstormProjects\\\\Usterka\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\danie\\\\WebstormProjects\\\\Usterka\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\danie\\\\WebstormProjects\\\\Usterka\\\\src\\\\components\\\\popups\\\\EventModal.js\";\nimport React, { useState } from \"react\";\nimport { Button, FormControl, InputGroup, Jumbotron, Modal } from \"react-bootstrap\";\nimport { getEventsWithColorsMapped, getStatusFromEvent, mockedEvents } from \"../utils/mockedEvents\";\nimport BeautyStars from \"beauty-stars\";\nimport styled from \"styled-components\";\nconst Rating = styled.div`\n{\ndisplay: flex;\njustify-content: space-around;\npadding: 16px;\n}\n`;\nconst CompanyWrapper = styled.div`\n{\ndisplay: flex;\nflex-direction: row;\njustify-content: space-around;\nalign-items: center;\nbackground-color: rgb(249,249,249);\npadding: 8px;\n}\n\nimg {\nborder: solid 1px;\n}\n`;\nexport const EventModal = props => {\n  let event = mockedEvents.find(event => event.id === props.id);\n\n  const _useState = useState(event.rate),\n        _useState2 = _slicedToArray(_useState, 2),\n        stars = _useState2[0],\n        setStars = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        input = _useState4[0],\n        setInput = _useState4[1];\n\n  function getRatingComponent(rating) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Rating, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(React.Fragment, null, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \"Cena\")), React.createElement(BeautyStars, {\n      activeColor: '#f7b731',\n      value: rating.cost,\n      onChange: value => {\n        event.state === 'finished' && setStars(prevState => {\n          return _objectSpread({}, prevState, {\n            cost: value\n          });\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })), React.createElement(Rating, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(React.Fragment, null, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Jakosc\")), React.createElement(BeautyStars, {\n      activeColor: '#f7b731',\n      value: rating.quality,\n      onChange: value => {\n        event.state === 'finished' && setStars(prevState => {\n          return _objectSpread({}, prevState, {\n            quality: value\n          });\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })), React.createElement(Rating, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(React.Fragment, null, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Czas\")), React.createElement(BeautyStars, {\n      activeColor: '#f7b731',\n      value: rating.time,\n      onChange: value => {\n        event.state === 'finished' && setStars(prevState => {\n          return _objectSpread({}, prevState, {\n            time: value\n          });\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })));\n  }\n\n  function handleClick() {\n    props.setStateEvents(prevState => {\n      let modified = Object.assign(event);\n      modified.state = 'reviewed';\n      modified.rate.text = input;\n      let newEvents = prevState.map(event => {\n        return event.id === props.id ? modified : event;\n      });\n      return getEventsWithColorsMapped(newEvents);\n    });\n    props.handleClose();\n  }\n\n  function getFooterLookFromEventState(event) {\n    switch (event.state) {\n      case 'finished':\n        return React.createElement(React.Fragment, null, React.createElement(Button, {\n          variant: \"secondary\",\n          onClick: props.handleClose,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, \"Anuluj\"), React.createElement(Button, {\n          variant: \"primary\",\n          onClick: handleClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, \"Zapisz\"));\n\n      case 'reviewed':\n      case 'active':\n      default:\n        return React.createElement(React.Fragment, null);\n    }\n  }\n\n  function getCompanyComponent() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(CompanyWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \" Wykonawca: \", event.company.name), React.createElement(\"img\", {\n      src: event.company.photo,\n      width: 100,\n      height: 100,\n      alt: \"company photo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })));\n  }\n\n  return React.createElement(Modal, {\n    size: \"lg\",\n    show: props.show,\n    onHide: props.handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(Modal.Header, {\n    closeButton: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(Modal.Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, event.title, \". \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }), \" Status: \", getStatusFromEvent(event))), React.createElement(Modal.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(Jumbotron, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, event.text), getCompanyComponent(), event.state === 'active' ? React.createElement(React.Fragment, null) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, getRatingComponent(stars), React.createElement(InputGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(InputGroup.Prepend, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(InputGroup.Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Ocena\")), React.createElement(FormControl, {\n    as: \"textarea\",\n    \"aria-label\": \"With textarea\",\n    defaultValue: event.rate.text,\n    onChange: text => setInput(text.target.value),\n    disabled: event.state === 'reviewed',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  })))), React.createElement(Modal.Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, getFooterLookFromEventState(event)));\n};","map":{"version":3,"sources":["C:/Users/danie/WebstormProjects/Usterka/src/components/popups/EventModal.js"],"names":["React","useState","Button","FormControl","InputGroup","Jumbotron","Modal","getEventsWithColorsMapped","getStatusFromEvent","mockedEvents","BeautyStars","styled","Rating","div","CompanyWrapper","EventModal","props","event","find","id","rate","stars","setStars","input","setInput","getRatingComponent","rating","cost","value","state","prevState","quality","time","handleClick","setStateEvents","modified","Object","assign","text","newEvents","map","handleClose","getFooterLookFromEventState","getCompanyComponent","company","name","photo","show","title","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,MAAR,EAAgBC,WAAhB,EAA6BC,UAA7B,EAAyCC,SAAzC,EAAoDC,KAApD,QAAgE,iBAAhE;AACA,SAAQC,yBAAR,EAAmCC,kBAAnC,EAAuDC,YAAvD,QAA0E,uBAA1E;AAEA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,MAAM,GAAGD,MAAM,CAACE,GAAI;;;;;;CAA1B;AAQA,MAAMC,cAAc,GAAGH,MAAM,CAACE,GAAI;;;;;;;;;;;;;CAAlC;AAeA,OAAO,MAAME,UAAU,GAAIC,KAAD,IAAW;AACjC,MAAIC,KAAK,GAAGR,YAAY,CAACS,IAAb,CAAkBD,KAAK,IAAIA,KAAK,CAACE,EAAN,KAAaH,KAAK,CAACG,EAA9C,CAAZ;;AADiC,oBAGPlB,QAAQ,CAACgB,KAAK,CAACG,IAAP,CAHD;AAAA;AAAA,QAG1BC,KAH0B;AAAA,QAGnBC,QAHmB;;AAAA,qBAIPrB,QAAQ,CAAC,EAAD,CAJD;AAAA;AAAA,QAI1BsB,KAJ0B;AAAA,QAInBC,QAJmB;;AAMjC,WAASC,kBAAT,CAA4BC,MAA5B,EAAoC;AAChC,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,0CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ,EAII,oBAAC,WAAD;AACI,MAAA,WAAW,EAAE,SADjB;AAEI,MAAA,KAAK,EAAEA,MAAM,CAACC,IAFlB;AAGI,MAAA,QAAQ,EAAEC,KAAK,IAAI;AACfX,QAAAA,KAAK,CAACY,KAAN,KAAgB,UAAhB,IACAP,QAAQ,CAACQ,SAAS,IAAI;AAClB,mCAAWA,SAAX;AAAsBH,YAAAA,IAAI,EAAEC;AAA5B;AACH,SAFO,CADR;AAIH,OARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ,EAgBI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,0CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CADJ,EAII,oBAAC,WAAD;AACI,MAAA,WAAW,EAAE,SADjB;AAEI,MAAA,KAAK,EAAEF,MAAM,CAACK,OAFlB;AAGI,MAAA,QAAQ,EAAEH,KAAK,IAAI;AACfX,QAAAA,KAAK,CAACY,KAAN,KAAgB,UAAhB,IACAP,QAAQ,CAACQ,SAAS,IAAI;AAClB,mCAAWA,SAAX;AAAsBC,YAAAA,OAAO,EAAEH;AAA/B;AACH,SAFO,CADR;AAIH,OARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CAhBJ,EA+BI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,0CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ,EAII,oBAAC,WAAD;AACI,MAAA,WAAW,EAAE,SADjB;AAEI,MAAA,KAAK,EAAEF,MAAM,CAACM,IAFlB;AAGI,MAAA,QAAQ,EAAEJ,KAAK,IAAI;AACfX,QAAAA,KAAK,CAACY,KAAN,KAAgB,UAAhB,IACAP,QAAQ,CAACQ,SAAS,IAAI;AAClB,mCAAWA,SAAX;AAAsBE,YAAAA,IAAI,EAAEJ;AAA5B;AACH,SAFO,CADR;AAIH,OARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CA/BJ,CADJ;AAiDH;;AAED,WAASK,WAAT,GAAuB;AACnBjB,IAAAA,KAAK,CAACkB,cAAN,CAAqBJ,SAAS,IAAI;AAC9B,UAAIK,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcpB,KAAd,CAAf;AACAkB,MAAAA,QAAQ,CAACN,KAAT,GAAiB,UAAjB;AACAM,MAAAA,QAAQ,CAACf,IAAT,CAAckB,IAAd,GAAqBf,KAArB;AAEA,UAAIgB,SAAS,GAAGT,SAAS,CAACU,GAAV,CAAcvB,KAAK,IAAI;AACnC,eAAOA,KAAK,CAACE,EAAN,KAAaH,KAAK,CAACG,EAAnB,GAAwBgB,QAAxB,GAAmClB,KAA1C;AACH,OAFe,CAAhB;AAIA,aAAOV,yBAAyB,CAACgC,SAAD,CAAhC;AACH,KAVD;AAWAvB,IAAAA,KAAK,CAACyB,WAAN;AACH;;AAED,WAASC,2BAAT,CAAqCzB,KAArC,EAA4C;AACxC,YAAQA,KAAK,CAACY,KAAd;AACI,WAAK,UAAL;AACI,eACI,0CACI,oBAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,WAAhB;AAA4B,UAAA,OAAO,EAAEb,KAAK,CAACyB,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAII,oBAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,SAAhB;AAA0B,UAAA,OAAO,EAAER,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,CADJ;;AAUJ,WAAK,UAAL;AACA,WAAK,QAAL;AACA;AACI,eACI,yCADJ;AAfR;AAoBH;;AAED,WAASU,mBAAT,GAA+B;AAC3B,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAiB1B,KAAK,CAAC2B,OAAN,CAAcC,IAA/B,CADJ,EAEI;AAAK,MAAA,GAAG,EAAE5B,KAAK,CAAC2B,OAAN,CAAcE,KAAxB;AAA+B,MAAA,KAAK,EAAE,GAAtC;AAA2C,MAAA,MAAM,EAAE,GAAnD;AAAwD,MAAA,GAAG,EAAC,eAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ,CADJ;AAQH;;AAED,SACI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,IAAZ;AAAiB,IAAA,IAAI,EAAE9B,KAAK,CAAC+B,IAA7B;AAAmC,IAAA,MAAM,EAAE/B,KAAK,CAACyB,WAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD,CAAO,MAAP;AAAc,IAAA,WAAW,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcxB,KAAK,CAAC+B,KAApB,QAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA5B,eAA2CxC,kBAAkB,CAACS,KAAD,CAA7D,CADJ,CADJ,EAII,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,KAAK,CAACqB,IADX,CADJ,EAKKK,mBAAmB,EALxB,EAOK1B,KAAK,CAACY,KAAN,KAAgB,QAAhB,GAA2B,yCAA3B,GACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKJ,kBAAkB,CAACJ,KAAD,CADvB,EAEI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD,CAAY,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD,CAAY,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,CADJ,EAII,oBAAC,WAAD;AAAa,IAAA,EAAE,EAAC,UAAhB;AACa,kBAAW,eADxB;AAEa,IAAA,YAAY,EAAEJ,KAAK,CAACG,IAAN,CAAWkB,IAFtC;AAGa,IAAA,QAAQ,EAAEA,IAAI,IAAId,QAAQ,CAACc,IAAI,CAACW,MAAL,CAAYrB,KAAb,CAHvC;AAIa,IAAA,QAAQ,EAAEX,KAAK,CAACY,KAAN,KAAgB,UAJvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CAFJ,CARR,CAJJ,EA8BI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKa,2BAA2B,CAACzB,KAAD,CADhC,CA9BJ,CADJ;AAoCH,CA/IM","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Button, FormControl, InputGroup, Jumbotron, Modal} from \"react-bootstrap\";\r\nimport {getEventsWithColorsMapped, getStatusFromEvent, mockedEvents} from \"../utils/mockedEvents\";\r\n\r\nimport BeautyStars from \"beauty-stars\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Rating = styled.div`\r\n{\r\ndisplay: flex;\r\njustify-content: space-around;\r\npadding: 16px;\r\n}\r\n`;\r\n\r\nconst CompanyWrapper = styled.div`\r\n{\r\ndisplay: flex;\r\nflex-direction: row;\r\njustify-content: space-around;\r\nalign-items: center;\r\nbackground-color: rgb(249,249,249);\r\npadding: 8px;\r\n}\r\n\r\nimg {\r\nborder: solid 1px;\r\n}\r\n`;\r\n\r\nexport const EventModal = (props) => {\r\n    let event = mockedEvents.find(event => event.id === props.id);\r\n\r\n    const [stars, setStars] = useState(event.rate);\r\n    const [input, setInput] = useState('');\r\n\r\n    function getRatingComponent(rating) {\r\n        return (\r\n            <div>\r\n                <Rating>\r\n                    <>\r\n                        <h3>Cena</h3>\r\n                    </>\r\n                    <BeautyStars\r\n                        activeColor={'#f7b731'}\r\n                        value={rating.cost}\r\n                        onChange={value => {\r\n                            event.state === 'finished' &&\r\n                            setStars(prevState => {\r\n                                return {...prevState, cost: value};\r\n                            })\r\n                        }}\r\n                    />\r\n                </Rating>\r\n                <Rating>\r\n                    <>\r\n                        <h3>Jakosc</h3>\r\n                    </>\r\n                    <BeautyStars\r\n                        activeColor={'#f7b731'}\r\n                        value={rating.quality}\r\n                        onChange={value => {\r\n                            event.state === 'finished' &&\r\n                            setStars(prevState => {\r\n                                return {...prevState, quality: value};\r\n                            })\r\n                        }}\r\n                    />\r\n                </Rating>\r\n                <Rating>\r\n                    <>\r\n                        <h3>Czas</h3>\r\n                    </>\r\n                    <BeautyStars\r\n                        activeColor={'#f7b731'}\r\n                        value={rating.time}\r\n                        onChange={value => {\r\n                            event.state === 'finished' &&\r\n                            setStars(prevState => {\r\n                                return {...prevState, time: value};\r\n                            })\r\n                        }}\r\n                    />\r\n                </Rating>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function handleClick() {\r\n        props.setStateEvents(prevState => {\r\n            let modified = Object.assign(event);\r\n            modified.state = 'reviewed';\r\n            modified.rate.text = input;\r\n\r\n            let newEvents = prevState.map(event => {\r\n                return event.id === props.id ? modified : event;\r\n            });\r\n\r\n            return getEventsWithColorsMapped(newEvents)\r\n        });\r\n        props.handleClose();\r\n    }\r\n\r\n    function getFooterLookFromEventState(event) {\r\n        switch (event.state) {\r\n            case 'finished':\r\n                return (\r\n                    <>\r\n                        <Button variant=\"secondary\" onClick={props.handleClose}>\r\n                            Anuluj\r\n                        </Button>\r\n                        <Button variant=\"primary\" onClick={handleClick}>\r\n                            Zapisz\r\n                        </Button>\r\n                    </>\r\n                );\r\n            case 'reviewed':\r\n            case 'active':\r\n            default:\r\n                return (\r\n                    <>\r\n                    </>\r\n                );\r\n        }\r\n    }\r\n\r\n    function getCompanyComponent() {\r\n        return (\r\n            <div>\r\n                <CompanyWrapper>\r\n                    <h4> Wykonawca: {event.company.name}</h4>\r\n                    <img src={event.company.photo} width={100} height={100} alt='company photo'/>\r\n                </CompanyWrapper>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Modal size='lg' show={props.show} onHide={props.handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{event.title}. <br/> Status: {getStatusFromEvent(event)}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Jumbotron>\r\n                    {event.text}\r\n                </Jumbotron>\r\n\r\n                {getCompanyComponent()}\r\n\r\n                {event.state === 'active' ? <></> : (\r\n                    <div>\r\n                        {getRatingComponent(stars)}\r\n                        <InputGroup>\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>Ocena</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl as=\"textarea\"\r\n                                         aria-label=\"With textarea\"\r\n                                         defaultValue={event.rate.text}\r\n                                         onChange={text => setInput(text.target.value)}\r\n                                         disabled={event.state === 'reviewed'}\r\n                            />\r\n                        </InputGroup>\r\n                    </div>\r\n                )}\r\n\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                {getFooterLookFromEventState(event)}\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n};"]},"metadata":{},"sourceType":"module"}